from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from crud_functions import *

api = "7657515087:AAEHpP3k31bOpOJnVB2n5bQ2YqIKUlwdy-A"
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'),
            KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        ],
        [KeyboardButton(text='–ö—É–ø–∏—Ç—å')],
        [KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
    ], resize_keyboard=True
)
gender_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π'),
            KeyboardButton(text='–ú—É–∂—Å–∫–æ–π')
        ],
    ], resize_keyboard=True
)
calc_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories'),
            InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
        ]
    ], resize_keyboard=True
)
buy_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='Product1', callback_data='product_buying'),
            InlineKeyboardButton(text='Product2', callback_data='product_buying'),
            InlineKeyboardButton(text='Product3', callback_data='product_buying'),
            InlineKeyboardButton(text='Product4', callback_data='product_buying')
        ]
    ], resize_keyboard=True
)

@dp.message_handler(commands=["start"])
async def start(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ–≥–∞—é—â–∏–π —Ç–≤–æ–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é.", reply_markup=main_menu_kb)

@dp.message_handler(text="–ö—É–ø–∏—Ç—å")
async def get_buying_list(message):
    products = get_all_products()
    for product in products:
        await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]} | –¶–µ–Ω–∞: {product[3]}')
        with open(f"files/{product[0]}.png", "rb") as img:
            await message.answer_photo(img)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=buy_kb)

@dp.callback_query_handler(text="product_buying")
async def send_confirm_message(call):
    await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")
    await call.answer()

@dp.message_handler(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message):
    await message.answer("–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

@dp.message_handler(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
async def main_menu(message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=calc_kb)

@dp.callback_query_handler(text="formulas")
async def get_formulas(call):
    await call.message.answer("–¥–ª—è –º—É–∂—á–∏–Ω: 10 —Ö –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 —Ö –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5")
    await call.message.answer("–¥–ª—è –∂–µ–Ω—â–∏–Ω: 10 x –≤–µ—Å (–∫–≥) + 6,25 x —Ä–æ—Å—Ç (—Å–º) ‚Äì 5 x –≤–æ–∑—Ä–∞—Å—Ç (–≥) ‚Äì 161")
    await call.answer()

class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()

@dp.message_handler(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def sing_up(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
    await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.username)
async def set_username(message, state):
    if is_included(message.text) is False:
        await state.update_data(username=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:")
        await RegistrationState.email.set()
    if is_included(message.text) is True:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è")
        await RegistrationState.username.set()

@dp.message_handler(state=RegistrationState.email)
async def set_email(message, state):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await RegistrationState.age.set()

@dp.message_handler(state=RegistrationState.age)
async def set_age(message, state):
    await state.update_data(age=message.text)
    data = await state.get_data()
    add_user(data["username"], data["email"], data["age"])
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞ ')
    await state.finish()

class UserState(StatesGroup):
    gender = State()
    age = State()
    growth = State()
    weight = State()

@dp.callback_query_handler(text="calories")
async def set_gender(call):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:\n"–ñ–µ–Ω—Å–∫–∏–π" –∏–ª–∏ "–ú—É–∂—Å–∫–æ–π"', reply_markup=gender_kb)
    await call.answer()
    await UserState.gender.set()

@dp.message_handler(state=UserState.gender)
async def set_age(message, state):
    await state.update_data(gender=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await UserState.age.set()

@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:")
    await UserState.growth.set()

@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:")
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    if data["gender"] == "–ñ–µ–Ω—Å–∫–∏–π":
        formula_woman = 10 * float(data["weight"]) + 6.25 * float(data["growth"]) - 5 * float(data["age"]) - 161
        await message.answer(f'–í–∞—à–∞ –∂–µ–Ω—Å–∫–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –≤ —Å—É—Ç–∫–∏ —Ä–∞–≤–Ω–∞: {formula_woman} –∫–∫–∞–ª.')
        await message.answer('–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞.')
    elif data["gender"] == "–ú—É–∂—Å–∫–æ–π":
        formula_man = 10 * float(data["weight"]) + 6.25 * float(data["growth"]) - 5 * float(data["age"]) + 5
        await message.answer(f'–í–∞—à–∞ –º—É–∂—Å–∫–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –≤ —Å—É—Ç–∫–∏ —Ä–∞–≤–Ω–∞ {formula_man} –∫–∫–∞–ª.')
        await message.answer('–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É —Ñ–æ—Ä–º—É–ª—ã –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞.')
    elif int(data["gender"]) != "–ñ–µ–Ω—Å–∫–∏–π" or "–ú—É–∂—Å–∫–æ–π":
        await message.answer("–í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Å–≤–æ–π –ø–æ–ª!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä")
    await state.finish()

@dp.message_handler()
async def all_massages(message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")

def main():
    executor.start_polling(dp, skip_updates=True)
if __name__ == "__main__":
    main()
